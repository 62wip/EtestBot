from uuid import uuid4
import re
from datetime import datetime

from typing import Any
from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery 
from aiogram.filters import Filter, Command

import app.keyboards as kb
from app.state import Form
from app.database.requests import Connection
from app.database.models import *
from config import TG_ID


router = Router()
connection = Connection()
data_for_show_result = {}
data_for_now_test = {}
data_for_now_test_result = {}

async def check_first_use(message: Message, state: FSMContext) -> None:
    if connection.checking_first_use(message.from_user.id):
        await message.answer(f'''<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è <u>{message.from_user.full_name}</u> ! ‚≠ê

<i>–í–∏–∂—É —Ç—ã —Ç—É—Ç –Ω–µ–¥–∞–≤–Ω–æ!</i>  ‚öîÔ∏è
–ü–æ–∑–≤–æ–ª—å —É–∑–Ω–∞—Ç—å <u>—Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ</u>, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>! üì¢''', parse_mode="HTML")
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ <i>–§–ò–û</i>', parse_mode="HTML")
        await state.set_state(Form.waiting_for_set_fio) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û

async def message_for_profile(user_id: int) -> str:
    user_data = connection.select_for_user_class_by_user_id(user_id)
    answer = f'''<u><b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b></u> üôéüèª‚Äç‚ôÇÔ∏è
<i>–§–ò–û(–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è)</i>: {user_data.fio}
<i>–¢–µ–ª–µ–≥—Ä–∞–º ID:</i> {user_data.user_id}\n'''
    if user_data.status == 'T':
        answer += '<i>–°—Ç–∞—Ç—É—Å</i>: –ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª—å'
    elif user_data.status == 'S':
        answer += f'<i>–°—Ç–∞—Ç—É—Å</i>: –£—á–µ–Ω–∏–∫\n<i>–ì—Ä—É–ø–ø–∞/–∫–ª–∞—Å—Å</i>: {user_data.group}'
    return answer

async def message_for_test_preview(user_id: int, context_data: dict) -> str:
    user_data = connection.select_for_user_class_by_user_id(user_id)
    answer = f'''<b><u>–ü—Ä–µ–¥–ø–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞ üìú</u></b>:

<b>–¢–µ—Å—Ç üìä"{context_data.get('test_name')}"</b>
'''
    if context_data.get('test_subject') != None:
        answer += f'<i>–ü—Ä–µ–¥–º–µ—Ç</i>: {context_data.get("test_subject")}\n'
    answer += f'''<i>–ê–≤—Ç–æ—Ä</i>: {user_data.fio}

<u>–í–æ–ø—Ä–æ—Å—ã:</u>
'''
    for i in range(len(context_data.get('questions'))):
        answer += f'<b>{i + 1}.</b> {context_data.get("questions")[i]}\n'
        for g in range(len(context_data.get('answers')[i])):
            if context_data.get('right_answers')[i] == g + 1:
                answer += '‚úîÔ∏è'
            else:
                answer += ' '
            answer += f' <i>{g + 1})</i> {context_data.get("answers")[i][g]}\n'
            
    return answer

async def message_for_finded_test(test: Test):
    answer = f'''<u>–¢–µ—Å—Ç –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üìá </u>

<b>–¢–µ—Å—Ç üìä "{test.test_name}"</b>
'''
    if test.subject_name != None:
        answer += f'<i>–ü—Ä–µ–¥–º–µ—Ç</i>: {test.subject_name}\n'
    test_author = connection.select_for_user_class_by_user_id(test.creator_user_id)
    answer += f'''<i>–ê–≤—Ç–æ—Ä</i>: {test_author.fio}
–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {str(test.creation_time)}

<u>–í–æ–ø—Ä–æ—Å—ã:</u>
'''
    for i in range(len(test.all_questions)):
        answer += f'<b>{i + 1}.</b> {test.all_questions[i]}\n'
        for g in range(len(test.all_answers[i])):
            answer += f' <i>{g + 1})</i> {test.all_answers[i][g]}\n'
    return answer

async def message_for_result_review(context_data: dict) -> str:
    test:Test = context_data.get('test')
    answer = f'''<b><u>–ü—Ä–µ–¥–ø–æ—Å–º–æ—Ç—Ä —Ä–µ—à–µ–Ω–∏—è üí¨</u></b>:

<b>–¢–µ—Å—Ç  üìä "{test.test_name}"</b>

<u>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</u>
'''
    for i in range(len(test.all_questions)):
        answer += f'<b>{i + 1}.</b> {test.all_questions[i]}\n'
        for g in range(len(test.all_answers[i])):
            if context_data.get('test_result')[i][0] == 1:
                if test.right_answers[i] == g + 1:
                    answer += '‚úîÔ∏è'
                else:
                    answer += ' '
            else:
                if context_data.get('test_result')[i][1] == g + 1:
                    answer += '‚úîÔ∏è'
                else:
                    answer += ' '
            answer += f'<i>{g + 1})</i> {test.all_answers[i][g]}\n'
    return answer

async def message_for_answer_question(now_question: int, test: Test) -> str:
    answer = f'<i>–í–æ–ø—Ä–æ—Å ‚Ññ{now_question + 1}</i>\n{test.all_questions[now_question]}\n'
    for i in range(len(test.all_answers[now_question])):
        answer += f' {i + 1}) {test.all_answers[now_question][i]}\n'
    return answer

async def message_for_show_more_test_result(test: Test, test_result: TestResult) -> str:
    user_data = connection.select_for_user_class_by_user_id(test.creator_user_id)
    answer = f'<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ ‚≠ê"{test.test_name}"</b>\n'
    if test.subject_name != None:
        answer += f'<i>–ü—Ä–µ–¥–º–µ—Ç:</i> {test.subject_name}\n'
    answer += f'''<i>–ê–≤—Ç–æ—Ä</i>: {user_data.fio}

<u>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</u>
'''
    for i in range(len(test.all_questions)):
        answer += f'<b>{i + 1}.</b> {test.all_questions[i]}\n'
        for g in range(len(test.all_answers[i])):
            if test.right_answers[i] == g + 1:
                answer += '‚úîÔ∏è'
            elif [k[1] for k in test_result.answers_with_mistakes if i + 1 == k[0]] == [g + 1]:
                answer += '‚ùå'
            else:
                answer += ' '
            answer += f'<i>{g + 1})</i> {test.all_answers[i][g]}\n'
    return answer

async def message_for_my_test(tests: list[Test]) -> str:
    answer = f'<i>–í—Å–µ –≤–∞—à–∏ —Ç–µ—Å—Ç—ã:</i>\n'
    for i in range(len(tests)):
        answer += f'{i + 1}. –¢–µ—Å—Ç <b>"{tests[i].test_name}"</b> üìä\n'
    return answer

async def message_for_now_test(test: Test, test_results: list[TestResult] or False) -> str:
    answer = f'–¢–µ—Å—Ç <b>"{test.test_name}"</b>\n–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞: <b>{test.test_key}</b> üîê\n–ö–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(test.all_questions)} üìà\n\n' 
    if not(test_results):
        answer += '–¢–µ—Å—Ç –ø–æ–∫–∞ <i>–Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—à–µ–ª ‚åõ</i>'
    else:
        answer += '<i>–†e–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π:</i>\n'
        for i in range(len(test_results)):
            user_who_done_test = connection.select_for_user_class_by_user_id(test_results[i].who_done_test)
            answer += f'<b>{i + 1}. {user_who_done_test.fio}</b> - <i>{test_results[i].procent_of_right()}%</i>; —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞: <i>{test_results[i].recomend_mark()}</i>\n'
    return answer

async def message_for_now_test_preview(test: Test) -> str:
    answer = f'''<b><u>–ü—Ä–µ–¥–ø–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞ üìú</u></b>:

<b>–¢–µ—Å—Ç üìä"{test.test_name}"</b>
'''
    if test.subject_name != None:
        answer += f'<i>–ü—Ä–µ–¥–º–µ—Ç</i>: {test.subject_name}\n'
    answer += f'\n<u>–í–æ–ø—Ä–æ—Å—ã:</u>\n'
    for i in range(len(test.all_questions)):
        answer += f'<b>{i + 1}.</b> {test.all_questions[i]}\n'
        for g in range(len(test.all_answers[i])):
            if test.right_answers[i] == g + 1:
                answer += '‚úîÔ∏è'
            else:
                answer += '  '
            answer += f'<i>{g + 1})</i> {test.all_answers[i][g]}\n'
    return answer

async def message_for_show_one_test_result(test: Test, test_result: TestResult):
    user_data = connection.select_for_user_class_by_user_id(test_result.who_done_test)
    answer = f'<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ "{test.test_name}" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üìù"{user_data.fio}"</b>\n\n'
    if user_data.group != None:
        answer += f'<i>–ì—Ä—É–ø–ø–∞:</i> {user_data.group}\n'
    answer += f'''<i>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</i>: {test_result.completion_time}

<u>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</u>
'''
    for i in range(len(test.all_questions)):
        answer += f'<b>{i + 1}.</b> {test.all_questions[i]}\n'
        for g in range(len(test.all_answers[i])):
            if test.right_answers[i] == g + 1:
                answer += '‚úîÔ∏è'
            elif [k[1] for k in test_result.answers_with_mistakes if k != [] if i + 1 == k[0]] == [g + 1]:
                answer += '‚ùå'
            else:
                answer += ' '
            answer += f'<i>{g + 1})</i> {test.all_answers[i][g]}\n'
    answer += f'\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: <b>{test_result.count_correct_answers}/{test_result.count_answers_in_total} - {test_result.procent_of_right()}%</b>\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞ - <b>{test_result.recomend_mark()}</b>'
    return answer

async def message_for_my_result(test_results: list[TestResult]):
    answer = f'<i>–í—Å–µ –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üí•</i>\n'
    for i in range(len(test_results)):
        test = connection.select_for_test_class_by_test_id(test_results[i].solved_test_id)
        answer += f'{i + 1}. –¢–µ—Å—Ç <b>"{test.test_name}"</b> - <b>{test_results[i].procent_of_right()} %</b>\n'
    return answer

async def message_for_checking_test_result(test_result: TestResult, test: Test) -> str:
    user_data = connection.select_for_user_class_by_user_id(test_result.who_done_test)
    answer = f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ <b>"{test.test_name}"</b>\n'
    if test.subject_name != None:
        answer += f'<i>–ü—Ä–µ–¥–º–µ—Ç:</i> {test.subject_name}\n'
    answer += f'''<i>–ê–≤—Ç–æ—Ä —Ç–µ—Å—Ç–∞</i>: {user_data.fio}
<i>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</i>: {test_result.completion_time}

<u>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</u>: <i>{test_result.count_correct_answers}/{test_result.count_answers_in_total}</i> - <b>{test_result.procent_of_right()}%</b>
<u>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞</u>: {test_result.recomend_mark()}
'''
    return answer

async def message_for_more_now_test_result(test_result: TestResult, test: Test) -> str:
    user_data = connection.select_for_user_class_by_user_id(test_result.who_done_test)
    answer = f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ ‚≠ê<b>"{test.test_name}"</b>\n'
    if test.subject_name != None:
        answer += f'<i>–ü—Ä–µ–¥–º–µ—Ç:</i> {test.subject_name}\n'
    answer += f'''<i>–ê–≤—Ç–æ—Ä —Ç–µ—Å—Ç–∞</i>: {user_data.fio}
<i>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</i>: {test_result.completion_time}

<u>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</u>
'''
    for i in range(len(test.all_questions)):
        answer += f'<b>{i + 1}.</b> {test.all_questions[i]}\n'
        for g in range(len(test.all_answers[i])):
            if test.right_answers[i] == g + 1:
                answer += '‚úîÔ∏è'
            elif [k[1] for k in test_result.answers_with_mistakes if k != [] if i + 1 == k[0]] == [g + 1]:
                answer += '‚ùå'
            else:
                answer += ' '
            answer += f'<i>{g + 1})</i> {test.all_answers[i][g]}\n'
    answer += f'\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: <b>{test_result.count_correct_answers}/{test_result.count_answers_in_total} - {test_result.procent_of_right()}%</b>\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞ - <b>{test_result.recomend_mark()}</b>'
    return answer

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def start_command(message: Message, state: FSMContext) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, <u>{message.from_user.first_name}</u>! –≠—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è <i>—Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤</i> –æ–Ω–ª–∞–π–Ω.', parse_mode="HTML")
    await check_first_use(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /how_to_use
@router.message(Command('how_to_use'))
async def how_to_use_command(message: Message) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /how_to_use
    await message.answer('''<b>‚Ä¢ –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /my_profile üôéüèª‚Äç‚ôÇÔ∏è

‚Ä¢ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /create_test üí°

‚Ä¢ E—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /solve_test –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞ (–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É –∞–≤—Ç–æ—Ä–∞ —Ç–µ—Å—Ç–∞) üí•

‚Ä¢ –ü—Ä–æ–ø–∏—Å–∞–≤ /my_test, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Ç–µ—Å—Ç—ã üß©

‚Ä¢ –ü—Ä–æ–ø–∏—Å–∞–≤ /my_result, –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ä–µ—à–∞–ª–∏ üçÅ

‚Ä¢ –ü—Ä–æ–ø–∏—Å–∞–≤ /feedback, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üí¨</b>''', parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_profile
@router.message(Command('my_profile'))
async def my_profile_command(message: Message, state: FSMContext) -> None:
    user_data = connection.select_for_user_class_by_user_id(message.from_user.id)
    if user_data.status == 'T':
        markup = kb.edit_my_profile_for_teacher
        await state.set_state(Form.waiting_for_update_for_teacher)
    elif user_data.status == 'S':
        markup = kb.edit_my_profile_for_student
        await state.set_state(Form.waiting_for_update_for_student)
    answer_text = await message_for_profile(message.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /my_profile
    await message.answer(answer_text, parse_mode="HTML", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_test
@router.message(Command('create_test'))
async def create_test_command(message: Message, state: FSMContext) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /create_test
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <i>—Ç–µ—Å—Ç–∞</i> </b>‚úçüèª', parse_mode="HTML")
    await state.set_state(Form.waiting_for_test_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /solve_test
@router.message(Command('solve_test'))
async def solve_test_command(message: Message, state: FSMContext) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /solve_test
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —Ç–µ—Å—Ç–∞ üîê</b>', parse_mode="HTML")
    await state.set_state(Form.waiting_for_test_key)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_test
@router.message(Command('my_test'))
async def my_test_command(message: Message, state: FSMContext) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /my_test
    tests = connection.select_for_tests_list_by_user_id(message.from_user.id)
    if tests is False:
        await message.answer('<b>–í—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ <u>–µ–¥–∏–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞</u> ‚ùå\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç –ø—Ä–æ–ø–∏—à–∏—Ç–µ /create_test üí°</b>', parse_mode="HTML")
    else:
        await state.update_data(tests=tests)
        answer_text = await message_for_my_test(tests)
        await message.answer(answer_text, parse_mode="HTML")
        await message.answer('<b>–ù–∞–ø–∏—à–∏—Ç–µ <u>–Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞</u>, –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚öôÔ∏è</b>', parse_mode="HTML")
        await state.set_state(Form.waiting_for_choosing_my_tests)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_result
@router.message(Command('my_result'))
async def my_result_command(message: Message, state: FSMContext) -> None:
    test_results = connection.select_for_test_results_list_by_user_id(message.from_user.id)
    if test_results is False:
        await message.answer('<b>–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –Ω–∏ <u>–µ–¥–∏–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞</u> ‚ùå\n–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø—Ä–æ–ø–∏—à–∏—Ç–µ /solve_test, –∞ –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞ üí•</b>', parse_mode="HTML")
    else:
        await state.update_data(test_results=test_results)
        answer_text = await message_for_my_result(test_results)
        await message.answer(answer_text, parse_mode="HTML")
        await message.answer('<b>–ù–∞–ø–∏—à–∏—Ç–µ <u>–Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞</u>, –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</b> ‚öôÔ∏è', parse_mode="HTML")
        await state.set_state(Form.waiting_for_choosing_my_results)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback
@router.message(Command('feedback'))
async def feedback_command(message: Message, state: FSMContext) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /feedback
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è <i>–æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</i> üí¨\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n<b>–û—Ç–º–µ–Ω–∞ ‚õî</b>', parse_mode="HTML", reply_markup=kb.cancel_for_feedback)
    await state.set_state(Form.waiting_for_feedback)

@router.message(Form.waiting_for_set_fio)
async def set_fio_state(message: Message, state: FSMContext) -> None:
    if message.text[0] == '/':
        await message.answer('–£–∫–∞–∂–∏—Ç–µ <u>–§–ò–û</u>, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É ‚ö†Ô∏è', parse_mode="HTML")
        await state.set_state(Form. waiting_for_set_fio) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –§–ò–û
    else:
        await state.update_data(fio=message.text)
        context_data = await state.get_data()
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, <u>{context_data.get("fio")}</u>! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <i>–∫—Ç–æ –≤—ã</i> üôéüèª‚Äç‚ôÇÔ∏è', parse_mode="HTML", reply_markup=kb.set_status)
        await state.set_state(Form.waiting_for_set_status)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

@router.message(Form.waiting_for_set_status)
async def set_status_state(message: Message, state: FSMContext) -> None:
    if message.text == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
        context_data = await state.get_data()
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, <u>{context_data.get("fio")}</u>! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. \n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º <i>–ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É</i> /how_to_use üß©', parse_mode="HTML")
        await state.clear()
        user = User(message.from_user.id, message.from_user.username, context_data.get('fio'), 'T', None)
        connection.insert_new_user_id(user)

    elif message.text == '–£—á–µ–Ω–∏–∫':
        context_data = await state.get_data()
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, <u>{context_data.get("fio")}</u>! –û—Å—Ç–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å <i>–≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–ª–∞—Å—Å</i> ü§ù', parse_mode="HTML", reply_markup=kb.set_status)
        await state.set_state(Form.waiting_for_set_group) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    else:
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ –≤–∞—à <u>—Å—Ç–∞—Ç—É—Å</u> üôéüèª‚Äç‚ôÇÔ∏è', parse_mode="HTML", reply_markup=kb.set_status)
        await state.set_state(Form.waiting_for_set_status) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

@router.message(Form.waiting_for_set_group)
async def set_group_state(message: Message, state: FSMContext) -> None:    
    if message.text[0] == '/':
        await message.answer('–£–∫–∞–∂–∏—Ç–µ <u>–≥—Ä—É–ø–ø—É/–∫–ª–∞—Å—Å</u>, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É ü§ù', parse_mode="HTML")
        await state.set_state(Form.waiting_for_set_group) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    else:
        context_data = await state.get_data()
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, <u>{context_data.get("fio")}</u>! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º <i>–ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É</i> /how_to_use üß©', parse_mode="HTML")
        await state.clear()
        user = User(message.from_user.id, message.from_user.username, context_data.get('fio'), 'S', message.text)
        connection.insert_new_user_id(user)

@router.message(Form.waiting_for_feedback)
async def feedback_state(message: Message, state: FSMContext, bot: Bot) -> None:
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('<i>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</i>', parse_mode="HTML")
    else:
        await message.answer('<i>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ</i>', parse_mode="HTML")
        await bot.send_message(chat_id=TG_ID, text=f'user_id: {message.from_user.id}\nusername: {message.from_user.username}\nfirst_name: {message.from_user.first_name}\n–¢–µ–∫—Å—Ç: {message.text}', parse_mode="HTML")
    await state.clear()

@router.message(Form.waiting_for_update_for_teacher, F.text.in_(kb.text_for_edit_my_profile_for_teacher))
async def update_for_teacher_state(message: Message, state: FSMContext) -> None:
    if message.text == '–§–ò–û':
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ <i>–§–ò–û</i>.', parse_mode="HTML")
        await state.set_state(Form.waiting_for_update_fio)
    elif message.text == '–°—Ç–∞—Ç—É—Å':
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å', parse_mode="HTML", reply_markup=kb.set_status)
        await state.set_state(Form.waiting_for_update_status)

@router.message(Form.waiting_for_update_for_student, F.text.in_(kb.text_for_edit_my_profile_for_student))
async def update_for_student_state(message: Message, state: FSMContext) -> None:
    if message.text == '–§–ò–û':
        await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ <i>–§–ò–û</i>', parse_mode="HTML")
        await state.set_state(Form.waiting_for_update_fio)
    elif message.text == '–°—Ç–∞—Ç—É—Å':
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å', parse_mode="HTML", reply_markup=kb.set_status)
        await state.set_state(Form.waiting_for_update_status)
    elif message.text == '–ì—Ä—É–ø–ø–∞':
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É', parse_mode="HTML")
        await state.set_state(Form.waiting_for_update_group)

@router.message(Form.waiting_for_update_fio)
async def update_fio_state(message: Message, state: FSMContext) -> None:
    if message.text[0] == '/':
        await message.answer('–£–∫–∞–∂–∏—Ç–µ <u>–§–ò–û</u>, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É ü§ù', parse_mode="HTML")
        await state.set_state(Form.waiting_for_update_fio)
    else:
        connection.update_fio_for_my_profile(message.from_user.id, message.text)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, <u>–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</u>, —Ç–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üôéüèª‚Äç‚ôÇÔ∏è', parse_mode="HTML")
        await message.answer(await message_for_profile(user_id=message.from_user.id), parse_mode="HTML")
        await state.clear()

@router.message(Form.waiting_for_update_status, F.text.in_(kb.text_for_set_status))
async def update_status_state(message: Message, state: FSMContext) -> None:
    if message.text == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
        connection.update_status_for_my_profile(message.from_user.id, 'T')
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, <u>–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</u>, —Ç–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üôéüèª‚Äç‚ôÇÔ∏è', parse_mode="HTML")
        await message.answer(await message_for_profile(user_id=message.from_user.id), parse_mode="HTML")
        await state.clear()
    elif message.text == '–£—á–µ–Ω–∏–∫':
        connection.update_status_for_my_profile(message.from_user.id, 'S')
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É/–∫–ª–∞—Å—Å ü§ù', parse_mode="HTML")
        await state.set_state(Form.waiting_for_update_group)

@router.message(Form.waiting_for_update_group)
async def update_group_state(message: Message, state: FSMContext) -> None:
    if message.text[0] == '/':
        await message.answer('–£–∫–∞–∂–∏—Ç–µ <u>–≥—Ä—É–ø–ø—É/–∫–ª–∞—Å—Å</u>, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É ü§ù', parse_mode="HTML")
        await state.set_state(Form.waiting_for_update_fio)
    else:
        connection.update_group_for_my_profile(message.from_user.id, message.text)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, <u>–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</u>, —Ç–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üôéüèª‚Äç‚ôÇÔ∏è', parse_mode="HTML")
        await message.answer(await message_for_profile(user_id=message.from_user.id), parse_mode="HTML")
        await state.clear()

@router.message(Form.waiting_for_test_name)
async def set_test_name_state(message: Message, state: FSMContext) -> None:
    if message.text[0] == '/':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ <u>–Ω–∞–∑–≤–∞–Ω–∏–∏–µ —Ç–µ—Å—Ç–∞</u>, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É üìù', parse_mode="HTML",  reply_markup=kb.cancel_for_create_test)
        await state.set_state(Form.waiting_for_test_name)
    else:
        await state.update_data(test_name=message.text)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É —Ç–µ—Å—Ç–∞ <i>(–µ—Å–ª–∏ –µ–µ –Ω–µ—Ç, —É–∫–∞–∂–∏—Ç–µ "-") üìù</i>', parse_mode="HTML",  reply_markup=kb.cancel_for_create_test)
        await state.set_state(Form.waiting_for_test_subject)

@router.message(Form.waiting_for_test_subject)
async def set_test_subject_state(message: Message, state: FSMContext) -> None:
    if message.text[0] == '/':
        await message.answer('–£–∫–∞–∂–∏—Ç–µ <u>–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É —Ç–µ—Å—Ç–∞ –∏–ª–∏ "-"</u>, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É üìù', parse_mode="HTML",  reply_markup=kb.cancel_for_create_test)
        await state.set_state(Form.waiting_for_test_name)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ <u>—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</u> üìù', parse_mode="HTML")
        await state.clear()
    else:
        if message.text == '-':
            await state.update_data(test_subject=None)
        else:
            await state.update_data(test_subject=message.text)
        await state.update_data(questions=[], answers=[], right_answers=[])
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1-–π –≤–æ–ø—Ä–æ—Å ü§î', parse_mode="HTML",  reply_markup=kb.cancel_for_create_test)
        await state.set_state(Form.waiting_for_test_question)

@router.message(Form.waiting_for_test_question)
async def set_test_question_state(message: Message, state: FSMContext) -> None:
    if message.text[0] == '/':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ <u>–≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞/u>, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É üìù', parse_mode="HTML", reply_markup=kb.cancel_for_create_test)
        await state.set_state(Form.waiting_for_question_name)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ <u>—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</u> üìù', parse_mode="HTML")
        await state.clear()
    elif message.text == '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä':
        context_data = await state.get_data()
        answer_text = await message_for_test_preview(message.from_user.id, context_data)
        await message.answer(answer_text, parse_mode="HTML", reply_markup=kb.choice_for_test_preview)
        await state.set_state(Form.waiting_for_test_preview)
    else:
        context_data = await state.get_data()
        await state.update_data(questions=[*context_data.get('questions'), message.text])
        await message.answer('''–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1) –í–∞—Ä–∏–∞–Ω—Ç
!2) –í–∞—Ä–∏–∞–Ω—Ç
3) –í–∞—Ä–∏–∞–Ω—Ç
4) –í–∞—Ä–∏–∞–Ω—Ç
(–≤–æ—Å–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)''', parse_mode="HTML", reply_markup=kb.cancel_for_create_test)
        await state.set_state(Form.waiting_for_test_answer)

@router.message(Form.waiting_for_test_answer)
async def set_test_answer_state(message: Message, state: FSMContext) -> None:
    if message.text[0] == '/':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ <u>–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞/u>, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É üìù', parse_mode="HTML",  reply_markup=kb.cancel_for_create_test)
        await state.set_state(Form.waiting_for_test_answer)
    elif message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ <u>—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</u> ‚ùå', parse_mode="HTML")
    else:
        var = message.text.split('\n')
        answers = []
        right_answer = []
        for i in range(len(var)):
            if var[i][0] == '!':
                right_answer.append(i + 1)
            if ') ' in var[i]:
                answers.append(var[i].split(') ', maxsplit=1)[1])
        if len(right_answer) != 1 or len(var) != len(answers) or len(var) < 2 or '' in answers or ' ' in answers:
            await message.answer('''<u>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞</u>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
1) –í–∞—Ä–∏–∞–Ω—Ç
!2) –í–∞—Ä–∏–∞–Ω—Ç
3) –í–∞—Ä–∏–∞–Ω—Ç
4) –í–∞—Ä–∏–∞–Ω—Ç
(–≤–æ—Å–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞)''', parse_mode="HTML")
            await state.set_state(Form.waiting_for_test_answer)
        else:
            context_data = await state.get_data()
            await state.update_data(answers=[*context_data.get('answers'), answers], right_answers=[*context_data.get('right_answers'), right_answer[0]])
            await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {len(context_data.get("questions")) + 1}-–π –≤–æ–ø—Ä–æ—Å', parse_mode="HTML",  reply_markup=kb.set_question_for_test)
            await state.set_state(Form.waiting_for_test_question)

@router.message(Form.waiting_for_test_preview, F.text.in_(kb.text_for_choice_for_test_preview))
async def set_chocie_after_priview(message: Message, state: FSMContext) -> None:
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ <u>—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</u> üìù', parse_mode="HTML")
        await state.clear()
    elif message.text == '–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å':
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ <i>–Ω–æ–º–µ—Ä</i> –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã <u>—Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å</u> ‚ùå', parse_mode="HTML",  reply_markup=kb.cancel_for_create_test)
        await state.set_state(Form.waiting_for_del_question)
    elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å':
        context_data = await state.get_data()
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {len(context_data.get("questions")) + 1}-–π –≤–æ–ø—Ä–æ—Å ‚úÖ', parse_mode="HTML",  reply_markup=kb.cancel_for_create_test)
        await state.set_state(Form.waiting_for_test_question)
    elif message.text == '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç':
        await message.answer('–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º <i>—á—É—Ç—å-—á—É—Ç—å</i>, –≤—ã–±–µ—Ä–µ—Ç–µ, –±—É–¥—É—Ç –ª–∏ –≤–∏–¥–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ ü§∑‚Äç‚ôÄÔ∏è', parse_mode="HTML", reply_markup=kb.choosing_visible_result)
        
@router.message(Form.waiting_for_del_question)
async def set_test_answer_state(message: Message, state: FSMContext) -> None:
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ <u>—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</u> ‚ùå', parse_mode="HTML")
        await state.clear()
    elif message.text == '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä':
        context_data = await state.get_data()
        answer_text = await message_for_test_preview(message.from_user.id, context_data)
        await message.answer(answer_text, parse_mode="HTML", reply_markup=kb.choice_for_test_preview)
        await state.set_state(Form.waiting_for_test_preview)
    else:
        try:
            if int(message.text) > 0:
                context_data = await state.get_data()
                context_data.get('questions').pop(int(message.text) - 1)
                context_data.get('answers').pop(int(message.text) - 1)
                context_data.get('right_answers').pop(int(message.text) - 1)
                await state.update_data(questions=context_data.get('questions'), answers=context_data.get('answers'), right_answers=context_data.get('right_answers'))
                await message.answer(f'–í–æ–ø—Ä–æ—Å ‚Ññ{message.text} <i>—É–¥–∞–ª–µ–Ω</i> –∏–∑ —Ç–µ—Å—Ç–∞ ‚ùå', parse_mode="HTML",  reply_markup=kb.set_question_for_test)
                if len(context_data.get('questions')) == 0:
                    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 1-–π –≤–æ–ø—Ä–æ—Å ‚úÖ', parse_mode="HTML",  reply_markup=kb.cancel_for_create_test)
                    await state.set_state(Form.waiting_for_test_question)
                else:
                    answer_text = await message_for_test_preview(message.from_user.id, context_data)
                    await message.answer(answer_text, parse_mode="HTML", reply_markup=kb.choice_for_test_preview)
                    await state.set_state(Form.waiting_for_test_preview)
            else:
                raise IndexError('The number less than one')
        except (TypeError, IndexError):
            await message.answer(f'–£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ (<i>—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</i>) üéØ', parse_mode="HTML",  reply_markup=kb.set_question_for_test)
            await state.set_state(Form.waiting_for_del_question)

@router.message(Form.waiting_for_test_preview, F.text.in_(kb.text_for_choosing_visible_result))
async def set_choosing_visible_result(message: Message, state: FSMContext) -> None:
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ <u>—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</u> üìù', parse_mode="HTML")
        await state.clear()
    elif message.text == '–î–∞':
        visible_result = True
    elif message.text == '–ù–µ—Ç':
        visible_result = False
    context_data = await state.get_data()
    key = uuid4()
    test = Test(None, message.from_user.id, datetime.now(), key, context_data.get('test_name'), context_data.get('subject_name'), context_data.get('questions'), context_data.get('answers'), context_data.get('right_answers'), visible_result)
    connection.insert_new_test(test)
    await message.answer(f'–¢–µ—Å—Ç "{context_data.get("test_name")}" —Å–æ–∑–¥–∞–Ω ‚úÖ\n–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –≤—Å—Ç–∞–≤—Ç–µ –¥–∞–Ω–Ω—ã–π –∫–ª—é—á –ø–æ—Å–ª–µ –∫–æ–º–∞–¥–Ω—ã /solve_test (–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–≤–æ–π-–∂–µ —Ç–µ—Å—Ç) üîí', parse_mode="HTML")
    await message.answer(f'`{key}`', parse_mode="MarkdownV2")
    await state.clear()

@router.message(Form.waiting_for_test_key)
async def start_solving_test(message: Message, state: FSMContext) -> None:
    try:
        solving_test = connection.select_for_test_class_by_uuid(UUID(message.text))
        if solving_test == False:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <i>–∫–ª—é—á</i> –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞ üîë', parse_mode="HTML")
            await state.set_state(Form.waiting_for_test_key)
        elif solving_test.creator_user_id == message.from_user.id:
           await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Å–≤–æ–π –∂–µ <u>—Ç–µ—Å—Ç</u> ‚ùå', parse_mode="HTML")
           await state.clear()
        elif type(connection.select_for_last_test_result_class_by_user_id_and_test_id(message.from_user.id, solving_test.test_id)) == TestResult:
            await state.update_data(test=solving_test, now_question=0, test_result=[])
            answer_text = await message_for_finded_test(solving_test)
            await message.answer(answer_text, parse_mode="HTML")
            await message.answer('–í—ã <u>—É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏</u> —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑?\n*<i>–†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç –ø—Ä–æ—à–ª—É—é</i> ü§î', parse_mode="HTML", reply_markup=kb.start_solve_test)
            await state.set_state(Form.waiting_for_start_test)
        else:
            await state.update_data(test=solving_test, now_question=0, test_result=[])
            answer_text = await message_for_finded_test(solving_test)
            await message.answer(answer_text, parse_mode="HTML", reply_markup=kb.start_solve_test)
            await state.set_state(Form.waiting_for_start_test)

    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <i>–∫–ª—é—á</i> –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞ üîë', parse_mode="HTML")
        await state.set_state(Form.waiting_for_start_test)

@router.message(Form.waiting_for_start_test, F.text.in_(kb.text_for_start_solve_test))
async def start_solving_test(message: Message, state: FSMContext) -> None:
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç <u>–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞</u> ‚ùå', parse_mode="HTML")
        await state.clear()
    else:
        context_data = await state.get_data()
        test:Test = context_data.get('test')
        await state.update_data(now_question=1)
        answer_markup = await kb.markup_for_answers(test.all_answers[0])
        answer_text = await message_for_answer_question(0, test)
        await message.answer(answer_text, parse_mode="HTML", reply_markup=answer_markup)
        await state.set_state(Form.waiting_for_solve_question)

@router.message(Form.waiting_for_solve_question)
async def solving_question(message: Message, state: FSMContext) -> None:
    context_data = await state.get_data()
    test:Test = context_data.get('test')
    form_answer = True
    variant = message.text.split(' ', 1)[1]
    if variant not in test.all_answers[context_data.get('now_question') - 1]:
        answer_markup = await kb.markup_for_answers(test.all_answers[context_data.get('now_question') - 1])
        answer_text = await message_for_answer_question(context_data.get("now_question") - 1, test)
        
        await message.answer(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ <i>–ø—É–Ω–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞</i>\n{answer_text} ‚ú®', parse_mode="HTML", reply_markup=answer_markup)
        await state.set_state(Form.waiting_for_solve_question)
        form_answer = False
    elif variant == test.all_answers[context_data.get('now_question') - 1][test.right_answers[context_data.get('now_question') - 1] - 1]:
        await state.update_data(test_result=[*context_data.get('test_result'), [1]])
    else:
        await state.update_data(test_result=[*context_data.get('test_result'), [0, test.all_answers[context_data.get('now_question') - 1].index(variant) + 1]])
    if len(test.all_questions) > context_data.get('now_question') and form_answer:
        answer_markup = await kb.markup_for_answers(test.all_answers[context_data.get('now_question')])
        answer_text = await message_for_answer_question(context_data.get("now_question"), test)
        await message.answer(answer_text, parse_mode="HTML", reply_markup=answer_markup)
        await state.update_data(now_question=context_data.get("now_question") + 1)
        await state.set_state(Form.waiting_for_solve_question)
    elif form_answer:
        context_data = await state.get_data()
        answer_text = await message_for_result_review(context_data)
        await message.answer(f'–í—ã <i>–æ—Ç–≤–µ—Ç–∏–ª–∏</i> –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã ‚úÖ', parse_mode="HTML")
        await message.answer(answer_text, parse_mode="HTML", reply_markup=kb.choice_for_result_preview)
        await state.set_state(Form.waiting_for_result_preview_aftermath)

@router.message(Form.waiting_for_result_preview_aftermath, F.text.in_(kb.text_for_choice_for_result_preview))
async def result_preview_aftermath(message: Message, state: FSMContext) -> None:
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç <u>–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞</u> ‚ùå', parse_mode="HTML")
        await state.clear()
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç':
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ <i>–Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞</i> –æ—Ç–≤–µ—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ‚úÖ', parse_mode="HTML")
        await state.set_state(Form.waiting_for_edit_answers)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç':
        context_data = await state.get_data()
        test:Test = context_data.get('test')
        context_test_result = context_data.get('test_result')
        test_result = TestResult(test.test_id, message.from_user.id, datetime.now(), context_test_result.count([1]), len(test.all_questions), [[i + 1, context_test_result[i][1]] for i in range(len(context_test_result)) if context_test_result[i][0] == 0])
        connection.insert_new_test_result(test_result)
        if test.visible_result:
            data_for_show_result[message.from_user.id] = [test, test_result]
            await message.answer(f'–¢–µ—Å—Ç "{test.test_name}" —É—Å–ø–µ—à–Ω–æ <u>–ø—Ä–æ–π–¥–µ–Ω</u> ‚úÖ\n\n<u>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</u>\n{test_result.count_correct_answers}/{test_result.count_answers_in_total} - {test_result.procent_of_right()}%\n<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞:</b> {test_result.recomend_mark()}', parse_mode="HTML" , reply_markup=kb.show_more_result)
            #
        else:
            await message.answer(f'–¢–µ—Å—Ç "{test.test_name}" —É—Å–ø–µ—à–Ω–æ <u>–ø—Ä–æ–π–¥–µ–Ω</u>\n–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –¥–æ—Å—Ç—É–ø –ø–æ–ª–Ω—ã–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–≤—Ç–æ—Ä–æ–º. –û–Ω —Å–º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–∑–∂–µ.\n\n<u>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</u>\n{test_result.count_correct_answers}/{test_result.count_answers_in_total} - {test_result.procent_of_right()}%\n<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞:</b> {test_result.recomend_mark()}', parse_mode="HTML")
        await state.clear()

@router.message(Form.waiting_for_edit_answers)
async def edit_answer(message: Message, state: FSMContext) -> None:
    try:
        context_data = await state.get_data()
        test:Test = context_data.get('test')
        answer_markup = await kb.markup_for_answers(test.all_answers[int(message.text) - 1])
        answer_text = await message_for_answer_question(int(message.text) - 1, test)
        await message.answer(answer_text, parse_mode="HTML",  reply_markup=answer_markup)
        await state.update_data(now_edit_question=int(message.text))
        await state.set_state(Form.waiting_for_edit_answers_result)
    except (TypeError, IndexError):
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ (<i>—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</i>) ü§î', parse_mode="HTML",  reply_markup=kb.set_question_for_test)
        await state.set_state(Form.waiting_for_edit_answers)

@router.message(Form.waiting_for_edit_answers_result)
async def edit_answer(message: Message, state: FSMContext) -> None:
    context_data = await state.get_data()
    test:Test = context_data.get('test')
    form_answer = True
    variant = message.text.split(' ', 1)[1]
    if variant not in test.all_answers[context_data.get('now_edit_question') - 1]:
        answer_markup = await kb.markup_for_answers(test.all_answers[context_data.get('now_edit_question') - 1])
        answer_text = await message_for_answer_question(context_data.get("now_edit_question") - 1, test)
        await message.answer(answer_text, parse_mode="HTML", reply_markup=answer_markup)
        await state.set_state(Form.waiting_for_edit_answers)
        form_answer = False
    elif variant == test.all_answers[context_data.get('now_edit_question') - 1][test.right_answers[context_data.get('now_edit_question') - 1] - 1]:
        test_result = context_data.get('test_result')
        test_result[context_data.get('now_edit_question') - 1] = [1]
        await state.update_data(test_result=test_result)
    else:
        test_result = context_data.get('test_result')
        test_result[context_data.get('now_edit_question') - 1] = [0, test.all_answers[context_data.get('now_edit_question') - 1].index(variant) + 1]
        await state.update_data(test_result=test_result)
    if form_answer:
        answer_text = await message_for_result_review(context_data)
        await message.answer(f'–û—Ç–≤–µ—Ç <i>–∏–∑–º–µ–Ω–µ–Ω</i> ‚úÖ', parse_mode="HTML")
        await message.answer(answer_text, parse_mode="HTML", reply_markup=kb.choice_for_result_preview)
        await state.set_state(Form.waiting_for_result_preview_aftermath)

@router.callback_query(F.data == 'show_more_test_result')
async def show_more_result(callback: CallbackQuery):
    answer_text = await message_for_show_more_test_result(data_for_show_result[callback.from_user.id][0], data_for_show_result[callback.from_user.id][1])
    await callback.message.edit_text(answer_text, parse_mode="HTML")

@router.message(Form.waiting_for_choosing_my_tests)
async def select_my_test(message: Message, state: FSMContext) -> None:
    try:
        context_data = await state.get_data()
        now_test:Test = context_data.get('tests')[int(message.text) - 1]
        test_results:list[TestResult] = connection.select_for_test_results_list_by_test_id(now_test.test_id)
        answer_markup = await kb.markup_for_choice_for_now_test(now_test.visible_result, test_results)
        answer_text = await message_for_now_test(now_test, test_results)
        await message.answer(answer_text, parse_mode="HTML", reply_markup=answer_markup)
        msg = await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ <i>–Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</i>, –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç ü§î', parse_mode="HTML")
        await state.update_data(now_test=now_test, test_results=test_results)
        data_for_now_test[message.from_user.id] = [now_test, test_results, state, msg]
        await state.set_state(Form.waiting_for_select_for_now_test)
    except (TypeError, IndexError, ValueError):
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ (<i>—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</i>) üìù', parse_mode="HTML")
        await state.set_state(Form.waiting_for_choosing_my_tests)

@router.callback_query(F.data == 'preview_for_now_test')
async def show_more_result(callback: CallbackQuery):
    answer_text = await message_for_now_test_preview(data_for_now_test[callback.from_user.id][0])
    await callback.message.edit_text(answer_text, parse_mode="HTML", reply_markup=kb.back_for_now_test)

@router.callback_query(F.data == 'make_invisible_result_for_now_test')
async def show_more_result(callback: CallbackQuery):
    connection.update_visible_result_for_now_test(data_for_now_test[callback.from_user.id][0].test_id, False)
    data_for_now_test[callback.from_user.id][0].update_visible_result(False)
    await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ <b>"{data_for_now_test[callback.from_user.id][0].test_name}"üìù\n</b>—Å–∫—Ä—ã—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë©üèΩ‚Äçüíª', parse_mode="HTML")

@router.callback_query(F.data == 'make_visible_result_for_now_test')
async def show_more_result(callback: CallbackQuery):
    connection.update_visible_result_for_now_test(data_for_now_test[callback.from_user.id][0].test_id, True)
    data_for_now_test[callback.from_user.id][0].update_visible_result(True)
    await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ <b>"{data_for_now_test[callback.from_user.id][0].test_name}" üìù\n</b>–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë©üèΩ‚Äçüíª', parse_mode="HTML")

@router.callback_query(F.data == 'delete_now_test')
async def show_more_result(callback: CallbackQuery):
    state:FSMContext = data_for_now_test[callback.from_user.id][2]
    await state.clear()
    await callback.message.delete_reply_markup()
    await data_for_now_test[callback.from_user.id][3].delete()
    await callback.message.answer(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç <b>"{data_for_now_test[callback.from_user.id][0].test_name}" ‚úÖ</b>', parse_mode="HTML", reply_markup=kb.choice_for_delete_now_test)

@router.callback_query(F.data == 'confirmed_delete_now_test')
async def show_more_result(callback: CallbackQuery):
    connection.delete_test_by_id(data_for_now_test[callback.from_user.id][0].test_id)
    await callback.message.edit_text(f'–¢–µ—Å—Ç <b>"{data_for_now_test[callback.from_user.id][0].test_name}"</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ‚úÖ', parse_mode="HTML")

@router.callback_query(F.data == 'back_from_delete_now_test')
async def show_more_result(callback: CallbackQuery):
    await callback.message.edit_text(f'–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ <b>"{data_for_now_test[callback.from_user.id][0].test_name}"</b> –æ—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ', parse_mode="HTML")

@router.message(Form.waiting_for_select_for_now_test)
async def select_for_now_test(message: Message, state: FSMContext) -> None:
    try:
        context_data = await state.get_data()
        now_test:Test = context_data.get('now_test')
        test_result:list[TestResult] = context_data.get('test_results')
        now_test_result = test_result[int(message.text) - 1]
        answer_text = await message_for_show_one_test_result(now_test, now_test_result)
        await message.answer(answer_text, parse_mode="HTML")
        await state.clear()
    except (TypeError, IndexError, ValueError):
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ (<i>—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</i>) ü§î', parse_mode="HTML")
        await state.set_state(Form.waiting_for_select_for_now_test)

@router.callback_query(F.data == 'back_for_now_test')
async def show_more_result(callback: CallbackQuery):
    answer_markup = await kb.markup_for_choice_for_now_test(data_for_now_test[callback.from_user.id][0].visible_result, data_for_now_test[callback.from_user.id][1])
    answer_text = await message_for_now_test(data_for_now_test[callback.from_user.id][0], data_for_now_test[callback.from_user.id][1])
    await callback.message.edit_text(answer_text, parse_mode="HTML", reply_markup=answer_markup)

@router.message(Form.waiting_for_choosing_my_results)
async def select_my_test(message: Message, state: FSMContext) -> None:
    try:
        context_data = await state.get_data()
        now_test_result:TestResult = context_data.get('test_results')[int(message.text) - 1]
        now_test = connection.select_for_test_class_by_test_id(now_test_result.solved_test_id)
        answer_text = await message_for_checking_test_result(now_test_result, now_test)
        if now_test.visible_result:
            data_for_now_test_result[message.from_user.id] = [now_test_result, now_test]
            await message.answer(answer_text, parse_mode="HTML", reply_markup=kb.show_more_for_now_test_result)
        else:
            await message.answer(answer_text, parse_mode="HTML")
        await state.clear()
    except (TypeError, IndexError, ValueError):
        await message.answer(f'–£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞ –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤ (<i>—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</i>) ü§î', parse_mode="HTML")
        await state.set_state(Form.waiting_for_choosing_my_results)

@router.callback_query(F.data == 'show_more_for_now_test_result')
async def show_more_now_test_result(callback: CallbackQuery):
    answer_text = await message_for_more_now_test_result(data_for_now_test_result[callback.from_user.id][0], data_for_now_test_result[callback.from_user.id][1])
    await callback.message.edit_text(answer_text, parse_mode="HTML")